name: Release

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Set up Git user
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Delete all previous tags and releases
        run: |
          # List of releases to exclude from deletion
          EXCLUDE_RELEASES=("v1.0.0" "v2.0.0")  # Add your excluded releases here
          
          # Delete all local tags
          git tag -l | xargs -n 1 git tag -d
          
          # Fetch tags from remote
          git fetch --tags
          
          # Delete all remote tags
          git tag -l | while read -r tag; do
            git push --delete origin "$tag"
          done
          
          # Check if there are any releases
          if [ -z "$(gh release list)" ]; then
            echo "No releases found"
          else
            echo "Releases found"
            # Delete all releases except those in the EXCLUDE_RELEASES list or drafts
            releases=$(gh release list --limit 100 | awk '{print $1}')
            for release in $releases; do
              if [[ " ${EXCLUDE_RELEASES[@]} " =~ " ${release} " ]]; then
                echo "Skipping release $release (excluded)"
              else
                # Check if the release is a draft
                if gh release view "$release" --json draft -q '.draft' | grep true > /dev/null 2>&1; then
                  echo "Skipping release $release (draft)"
                else
                  # Delete the release if it isn't a draft and isn't excluded
                  if gh release view "$release" > /dev/null 2>&1; then
                    gh release delete "$release" -y
                  else
                    echo "Release $release not found"
                  fi
                fi
              fi
            done
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: /usr/bin/bash -e {0}

      - name: Set timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Build for Linux
        run: |
          export GOOS=linux
          export GOARCH=amd64
          go build -o ./bin/ava-linux .
          git tag -d "linux-release-${{ env.TIMESTAMP }}" || true
          git push --delete origin "linux-release-${{ env.TIMESTAMP }}" || true
          git tag -a "linux-release-${{ env.TIMESTAMP }}" -m "Linux release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Linux tag
        run: |
          git push origin "linux-release-${{ env.TIMESTAMP }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Linux release
        id: create_linux_release
        uses: actions/create-release@v1
        with:
          tag_name: "linux-release-${{ env.TIMESTAMP }}"
          release_name: "Linux Release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_linux_release.outputs.upload_url }}
          asset_path: ./bin/ava-linux
          asset_name: ava-linux
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Windows
        run: |
          export GOOS=windows
          export GOARCH=amd64
          go build -o ./bin/ava-windows.exe .
          git tag -d "windows-release-${{ env.TIMESTAMP }}" || true
          git push --delete origin "windows-release-${{ env.TIMESTAMP }}" || true
          git tag -a "windows-release-${{ env.TIMESTAMP }}" -m "Windows release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Windows tag
        run: |
          git push origin "windows-release-${{ env.TIMESTAMP }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Windows release
        id: create_windows_release
        uses: actions/create-release@v1
        with:
          tag_name: "windows-release-${{ env.TIMESTAMP }}"
          release_name: "Windows Release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_windows_release.outputs.upload_url }}
          asset_path: ./bin/ava-windows.exe
          asset_name: ava-windows.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Mac
        run: |
          export GOOS=darwin
          export GOARCH=amd64
          go build -o ./bin/ava-mac .
          git tag -d "mac-release-${{ env.TIMESTAMP }}" || true
          git push --delete origin "mac-release-${{ env.TIMESTAMP }}" || true
          git tag -a "mac-release-${{ env.TIMESTAMP }}" -m "Mac release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Mac tag
        run: |
          git push origin "mac-release-${{ env.TIMESTAMP }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Mac release
        id: create_mac_release
        uses: actions/create-release@v1
        with:
          tag_name: "mac-release-${{ env.TIMESTAMP }}"
          release_name: "Mac Release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Mac binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_mac_release.outputs.upload_url }}
          asset_path: ./bin/ava-mac
          asset_name: ava-mac
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}