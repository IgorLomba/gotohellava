name: Release

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Set up Git user
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Build for Linux
        run: |
          export GOOS=linux
          export GOARCH=amd64
          go build -o ./bin/ava-linux .
          git tag -d "linux-release" || true
          git push --delete origin "linux-release" || true
          @TAG="linux-$$(date '+%Y-%m-%d-%H-%M')" && git tag $$TAG && git push origin $$TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Linux release
        id: create_linux_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.build-and-release.outputs.TAG }}
          release_name: "Linux Release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_linux_release.outputs.upload_url }}
          asset_path: ./bin/ava-linux
          asset_name: ava-linux
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Windows
        run: |
          export GOOS=windows
          export GOARCH=amd64
          go build -o ./bin/ava-windows.exe .
          git tag -d "windows-release" || true
          git push --delete origin "windows-release" || true
          @TAG="windows-$$(date '+%Y-%m-%d-%H-%M')" && git tag $$TAG && git push origin $$TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Windows release
        id: create_windows_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.build-and-release.outputs.TAG }}
          release_name: "Windows Release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_windows_release.outputs.upload_url }}
          asset_path: ./bin/ava-windows.exe
          asset_name: ava-windows.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Mac
        run: |
          export GOOS=darwin
          export GOARCH=amd64
          go build -o ./bin/ava-mac .
          git tag -d "mac-release" || true
          git push --delete origin "mac-release" || true
          @TAG="mac-$$(date '+%Y-%m-%d-%H-%M')" && git tag $$TAG && git push origin $$TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Mac release
        id: create_mac_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.build-and-release.outputs.TAG }}
          release_name: "Mac Release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Mac binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_mac_release.outputs.upload_url }}
          asset_path: ./bin/ava-mac
          asset_name: ava-mac
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}